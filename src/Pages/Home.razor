@page "/"
@using ToDo.Model
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Home</PageTitle>

<h1>ToDo</h1>

<style>
    .tasks {
        list-style-type: none;
        padding: 0;
    }

    .tasks li {
        padding: 0.5rem;
        border-bottom: 1px solid #ccc;
        display: flex;
        flex-direction: row;
        align-content: center;
        justify-content: space-between;
        align-items: center;
    }

    .tasks li:last-child {
        border-bottom: none;
    }

    .btn-delete {
        padding: 5px;
        cursor: pointer;
    }

    span.task-title {
        width: 100%;
        margin-left: 10px;
    }

    .completed {
        color: gray;
    }
</style>

<div class="row">
    <div class="col-md-6">
        <h2>Pending tasks</h2>
        @if (Tasks.Any(t => !t.IsDone))
        {
            <ul class="tasks">
                @foreach (var task in Tasks.Where(t => !t.IsDone))
                {
                    <li><input type="checkbox" checked="@task.IsDone" @onchange="_ => ChangeTaskStatus(task)"> <span
                            class="task-title">@task.Title</span> <span class="btn-delete"
                            @onclick="_ => DeleteTask(task.Id)">❌</span></li>
                }
            </ul>
        }
        else
        {
            <p>No pending tasks</p>
        }

        <h2>Completed tasks</h2>
        @if (Tasks.Any(t => t.IsDone))
        {
            <ul class="tasks completed">
                @foreach (var task in Tasks.Where(t => t.IsDone))
                {
                    <li><input type="checkbox" checked="@task.IsDone" @onchange="_ => ChangeTaskStatus(task)"> <span
                            class="task-title">@task.Title</span></li>
                }
            </ul>
        }
        else
        {
            <p>No completed tasks</p>
        }
    </div>

    <div class="col-md-6">
        <h2>New task</h2>
        <input type="text" class="form-control" @bind="newTaskTitle" @onkeyup="OnKeyPress"
            placeholder="Enter a task title" />
        <button class="btn btn-primary mt-2" @onclick="AddTask">Add Task</button>
    </div>
</div>

@code {
    private List<ToDoTask> Tasks { get; set; } = new List<ToDoTask>();
    private string? newTaskTitle { get; set; }

    private void DeleteTask(string id)
    {
        Tasks.RemoveAll(t => t.Id == id);
        SaveTasks();
    }

    private void ChangeTaskStatus(ToDoTask task)
    {
        task.IsDone = !task.IsDone;
        SaveTasks();
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        Console.WriteLine(e.Key);
        if (e.Key == "Enter")
        {
            AddTask();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var tasks = await localStorage.GetItemAsync<List<ToDoTask>>("tasks");
        if (tasks != null)
        {
            Tasks = tasks;
        }
    }

    private void AddTask()
    {
        if (string.IsNullOrEmpty(newTaskTitle))
        {
            return;
        }

        Tasks.Add(new ToDoTask { Title = newTaskTitle });
        newTaskTitle = string.Empty;
        SaveTasks();
    }

    private void SaveTasks()
    {
        localStorage.SetItemAsync("tasks", Tasks);
    }
}